package com.edge.akamaiedge
import com.akamai.edgegrid.signer.ClientCredential
import com.akamai.edgegrid.signer.apachehttpclient.ApacheHttpClientEdgeGridInterceptor
import com.akamai.edgegrid.signer.apachehttpclient.ApacheHttpClientEdgeGridRoutePlanner
import org.apache.commons.io.IOUtils
import org.apache.http.HttpResponse
import org.apache.http.client.HttpClient
import org.apache.http.client.methods.HttpGet
import org.apache.http.client.methods.HttpPost
import org.apache.http.client.methods.HttpPut
import org.apache.http.client.methods.HttpUriRequest
import org.apache.http.entity.StringEntity
import org.apache.http.impl.client.HttpClientBuilder
import org.apache.http.impl.conn.PoolingHttpClientConnectionManager
import spock.lang.Specification

import java.util.concurrent.Callable
import java.util.concurrent.ExecutorService
import java.util.concurrent.Executors


class AkamaiBulkApiSpec extends Specification {

    private HttpClient client
    ExecutorService executorService
    private static final LOCK = new Object()

    def setup() {
        init()
        this.executorService = Executors.newFixedThreadPool(1)
    }

    def 'can upload 500 ipaddresses'() {
        expect:
            int count = 0
            for(String ipAddress: iplist()) {
                println ipAddress
                executorService.submit(new Callable() {
                    @Override
                    Object call() throws Exception {
                        HttpResponse httpResponse
                        synchronized (LOCK){
                            httpResponse = client.execute(getRequest(ipAddress))
                        }
                        String s = IOUtils.toString(httpResponse.entity.content, "UTF-8")
                        println "------------------------"
                        println("Status code [["+httpResponse.getStatusLine().statusCode + "]]")
                        println "-------------------------"
                        return null
                    }
                })
//                HttpResponse httpResponse = client.execute(getRequest(ipAddress))
//                String s = IOUtils.toString(httpResponse.entity.content, "UTF-8")
//                println "------------------------"
//                println("Status code [["+httpResponse.getStatusLine().statusCode + "]]")
//                println "-------------------------"
////                httpResponse.getStatusLine().statusCode ==  200

                assert true

                    }
    }

    def 'can bulk upload'() {
        expect:
            def subList = iplist().subList(0,5)
            String path = "/network-list/v2/network-lists/60557_I3TEST/append"
        String  jsonPayload = """
{
    "list": [
        ${subList.collect{ "\"${it}\""}.join(", ")}
    ]
}
"""
        println ">>>>>>>>>>>>>>>>>>>>>"
        println jsonPayload
        println ">>>>>>>>>>>>>>>>>>>>>"
        HttpPost httpPost = new HttpPost(path)
        httpPost.with {
            StringEntity entity = new StringEntity(jsonPayload)
            setEntity(entity)
            setHeader("Content-type", "application/json")
        }

        HttpResponse httpResponse = client.execute(httpPost)
        String s = IOUtils.toString(httpResponse.entity.content, "UTF-8")
        println "------------------------"
        println("Status code [["+httpResponse.getStatusLine().statusCode + "]]")
        println "-------------------------"

    }

    def 'split ips'() {
        expect:
           String test = """
36.93.175.25   ,
239.92.254.132 ,
39.141.171.38  ,
197.15.201.67
"""
        String[] result = test.split(",")
        println(result.collect({ it.trim()}))
        assert true

    }

    private void init() {
        ClientCredential.ClientCredentialBuilder clientCredentialBuilder = new ClientCredential.ClientCredentialBuilder()
        clientCredentialBuilder.clientSecret("1FNDxpSpQqla6xupvzdQAfJ5o3Mz5KFEX1+OiZibNvk=")//401
        clientCredentialBuilder.host("akab-4s7rgr3vsy3dkfto-e2tduibfzl3pbloh.luna.akamaiapis.net")//400
        clientCredentialBuilder.accessToken("akab-ovan6n46uhvsftdg-yz5vs7o2s5cf32hx")//401
        clientCredentialBuilder.clientToken("akab-fpw3euy2mhpxmapx-44ejpchoc3bt2j5l") //400

        ClientCredential clientCredential = clientCredentialBuilder.build()

        PoolingHttpClientConnectionManager cm = new PoolingHttpClientConnectionManager();
        cm.setMaxTotal(200);
        cm.setDefaultMaxPerRoute(20);


         client = HttpClientBuilder.create()
                .addInterceptorFirst(new ApacheHttpClientEdgeGridInterceptor(clientCredential))
                .setRoutePlanner(new ApacheHttpClientEdgeGridRoutePlanner(clientCredential))
//                .setConnectionManager(cm)
                .build();
    }

    private List<String> ips() {
        ['62.198.57.154',
         '130.129.255.18',
         '212.49.178.133',
         '1.169.83.66',
         '69.196.46.106',
         '229.160.139.219',
         '240.86.1.242',
         '111.223.8.189',
         '156.40.163.159',
         '213.123.131.120',
         '32.159.59.69',
         '171.184.255.129',
         '129.239.234.225',
         '48.150.37.64',
         '133.15.137.4',
         '77.164.5.85',
         '239.180.124.189',
         '139.188.8.66',
         '187.89.239.6',
         '155.74.162.60']


    }

    HttpUriRequest getRequest(String ipAddress) {
        final path = "/network-list/v2/network-lists/60557_I3TEST/elements?element=${ipAddress}"
        HttpPut httpPut = new HttpPut(path)
        return httpPut
    }

    List<String> iplist() {
       String listString =  """
241.204.195.21  ,
16.163.216.206  ,
121.190.146.180 ,
69.104.251.171  ,
81.38.11.216    ,
72.21.7.142     ,
145.3.241.71    ,
74.94.198.150   ,
225.225.38.214  ,
237.190.189.70  ,
228.62.9.13     ,
0.247.109.155   ,
231.20.212.88   ,
155.118.7.77    ,
216.226.122.17  ,
154.214.212.53  ,
205.218.226.9   ,
155.172.23.124  ,
18.57.174.241   ,
136.18.181.223  ,
229.123.4.254   ,
148.10.185.91   ,
20.20.223.166   ,
79.132.226.115  ,
120.164.205.180 ,
148.112.214.213 ,
117.174.57.128  ,
195.69.135.150  ,
192.32.20.186   ,
208.183.11.90   ,
170.172.72.254  ,
114.136.205.102 ,
246.129.124.103 ,
21.206.216.24   ,
176.94.86.157   ,
226.194.4.153   ,
135.77.57.66    ,
186.87.91.110   ,
245.137.64.150  ,
53.103.30.79    ,
70.15.101.109   ,
206.137.250.158 ,
5.75.24.77      ,
232.96.172.223  ,
211.89.84.233   ,
234.122.51.106  ,
255.64.255.252  ,
223.124.102.209 ,
142.96.129.226  ,
186.190.147.233 ,
24.140.157.217  ,
41.98.182.105   ,
237.11.107.229  ,
14.66.94.154    ,
69.188.67.211   ,
99.119.171.31   ,
216.72.234.4    ,
136.80.8.114    ,
209.7.0.31      ,
90.176.72.226   ,
178.83.13.49    ,
226.185.2.123   ,
86.108.201.91   ,
61.68.69.192    ,
148.8.62.32     ,
23.248.166.65   ,
90.221.32.45    ,
137.76.232.35   ,
37.5.58.86      ,
102.156.170.128 ,
248.136.141.31  ,
48.232.249.52   ,
239.150.85.115  ,
173.191.17.38   ,
24.248.69.79    ,
53.108.252.106  ,
68.148.162.243  ,
71.10.140.36    ,
216.100.189.168 ,
16.47.82.45     ,
10.15.244.195   ,
86.207.165.127  ,
87.249.38.121   ,
253.79.40.39    ,
32.86.99.240    ,
152.192.108.113 ,
111.212.204.116 ,
43.174.210.69   ,
18.86.164.219   ,
202.3.24.247    ,
126.250.204.96  ,
26.250.27.203   ,
86.140.156.57   ,
252.216.94.218  ,
99.122.137.70   ,
90.190.230.210  ,
131.156.174.77  ,
241.218.237.85  ,
150.88.224.190  ,
12.120.122.176  ,
230.174.250.184 ,
91.131.141.249  ,
113.114.76.166  ,
220.39.155.214  ,
174.15.97.179   ,
139.225.243.31  ,
104.79.248.155  ,
25.22.165.128   ,
52.134.123.92   ,
88.104.125.171  ,
12.114.181.181  ,
191.234.61.24   ,
202.238.178.121 ,
254.240.35.92   ,
126.158.243.182 ,
253.206.27.23   ,
142.30.126.17   ,
25.75.185.238   ,
95.6.232.164    ,
97.9.6.163      ,
158.95.83.172   ,
101.130.232.91  ,
8.165.78.72     ,
23.196.176.109  ,
63.41.244.188   ,
38.62.183.61    ,
178.132.159.59  ,
25.43.85.0      ,
124.133.245.21  ,
203.3.157.243   ,
183.86.33.150   ,
72.98.57.38     ,
221.128.87.237  ,
103.94.48.123   ,
190.17.145.234  ,
234.229.22.28   ,
166.51.3.10     ,
148.41.168.75   ,
20.100.36.32    ,
178.71.143.107  ,
117.111.190.237 ,
19.105.248.192  ,
182.124.59.229  ,
10.212.200.14   ,
238.145.3.121   ,
117.117.143.211 ,
224.126.36.153  ,
124.28.156.155  ,
184.123.105.220 ,
183.205.60.136  ,
30.166.245.33   ,
15.235.19.39    ,
65.17.194.166   ,
159.148.252.226 ,
139.66.72.35    ,
205.249.27.167  ,
176.174.85.180  ,
227.152.44.184  ,
100.59.77.174   ,
8.183.248.124   ,
175.63.16.177   ,
128.244.155.207 ,
44.16.94.140    ,
164.134.18.80   ,
110.32.40.175   ,
217.132.51.116  ,
221.79.150.169  ,
242.72.241.28   ,
124.87.211.191  ,
166.176.116.113 ,
212.81.29.254   ,
229.34.159.89   ,
215.142.223.142 ,
184.57.148.197  ,
188.85.9.255    ,
58.54.140.90    ,
250.115.69.240  ,
44.117.128.107  ,
40.230.8.68     ,
15.88.169.255   ,
44.8.175.33     ,
249.144.130.11  ,
6.53.148.171    ,
1.225.213.35    ,
48.92.180.216   ,
219.81.72.89    ,
248.34.195.139  ,
142.177.130.194 ,
145.63.125.72   ,
1.14.127.57     ,
68.49.52.245    ,
160.116.245.233 ,
246.250.198.49  ,
104.176.179.154 ,
175.169.109.172 ,
127.180.39.210  ,
249.40.42.96    ,
190.231.164.40  ,
235.8.12.64     ,
68.224.48.170   ,
197.99.218.167  ,
178.223.209.6   ,
78.47.250.3     ,
136.98.127.22   ,
230.40.238.135  ,
246.107.53.175  ,
137.157.63.237  ,
90.6.86.149     ,
80.131.127.30   ,
198.91.79.167   ,
61.214.101.207  ,
15.196.32.89    ,
205.235.41.184  ,
74.89.18.182    ,
119.182.209.129 ,
140.56.214.245  ,
74.150.136.243  ,
41.32.243.183   ,
62.195.90.85    ,
113.51.217.179  ,
55.160.205.18   ,
116.79.182.84   ,
44.42.137.38    ,
109.214.220.112 ,
109.120.161.110 ,
152.163.23.105  ,
239.217.117.176 ,
204.159.195.126 ,
138.8.100.137   ,
208.204.30.85   ,
215.150.112.64  ,
171.164.160.124 ,
243.104.248.56  ,
189.226.111.3   ,
226.17.73.197   ,
100.236.167.76  ,
18.132.38.223   ,
226.155.249.39  ,
179.14.53.79    ,
242.212.177.67  ,
18.202.82.151   ,
144.71.213.198  ,
10.28.152.217   ,
137.65.72.63    ,
27.34.107.16    ,
186.141.44.142  ,
140.8.174.194   ,
195.129.219.237 ,
26.18.104.20    ,
100.39.108.94   ,
197.247.228.247 ,
240.135.11.66   ,
170.138.150.71  ,
132.189.57.219  ,
149.126.9.181   ,
153.29.181.37   ,
73.164.36.225   ,
224.12.235.41   ,
120.149.207.242 ,
52.22.0.100     ,
96.142.25.141   ,
67.198.154.85   ,
29.250.239.162  ,
160.44.252.22   ,
28.3.71.79      ,
207.28.229.103  ,
202.167.53.144  ,
184.3.59.123    ,
79.9.123.206    ,
6.96.145.99     ,
221.231.152.215 ,
16.111.188.58   ,
185.53.129.55   ,
187.70.191.68   ,
74.134.199.215  ,
233.117.65.4    ,
198.56.226.23   ,
29.189.158.77   ,
190.111.106.11  ,
75.149.8.21     ,
128.108.84.104  ,
145.194.24.53   ,
218.161.235.226 ,
119.218.65.9    ,
136.34.187.230  ,
141.110.143.50  ,
124.219.168.102 ,
59.65.68.201    ,
148.248.181.37  ,
124.225.26.152  ,
208.107.74.190  ,
226.84.186.72   ,
106.247.200.53  ,
242.79.34.88    ,
69.183.250.149  ,
46.160.186.159  ,
187.0.24.190    ,
76.241.80.86    ,
67.124.91.28    ,
214.123.20.128  ,
209.57.242.219  ,
84.183.204.156  ,
86.22.140.199   ,
249.240.182.66  ,
47.54.61.88     ,
121.219.171.206 ,
236.43.207.124  ,
176.106.250.76  ,
34.106.205.133  ,
59.157.141.55   ,
3.161.8.150     ,
68.195.101.72   ,
176.152.73.163  ,
82.184.29.198   ,
156.23.208.108  ,
203.104.96.218  ,
242.23.99.75    ,
18.28.34.159    ,
79.175.215.126  ,
193.32.18.66    ,
190.150.196.247 ,
77.53.93.35     ,
7.164.57.70     ,
75.178.27.151   ,
40.106.242.8    ,
151.32.48.242   ,
225.167.22.15   ,
78.47.14.59     ,
32.222.54.186   ,
153.128.30.254  ,
227.62.197.154  ,
210.241.159.60  ,
224.77.110.4    ,
163.91.89.156   ,
141.61.102.212  ,
223.149.38.227  ,
50.83.64.224    ,
40.19.157.189   ,
2.90.97.137     ,
147.34.101.251  ,
113.104.16.79   ,
25.166.126.242  ,
228.129.176.215 ,
194.15.112.246  ,
184.31.40.179   ,
73.245.94.161   ,
91.125.43.110   ,
121.142.231.150 ,
169.56.75.12    ,
80.74.158.120   ,
208.54.232.109  ,
250.83.153.77   ,
67.176.38.59    ,
87.216.238.9    ,
234.32.85.38    ,
65.24.105.200   ,
245.233.221.163 ,
85.162.159.72   ,
141.119.219.189 ,
62.83.153.161   ,
200.80.2.127    ,
239.82.230.213  ,
62.98.98.90     ,
82.165.15.204   ,
238.40.78.53    ,
174.109.106.151 ,
246.198.11.91   ,
79.13.138.147   ,
77.155.60.119   ,
41.150.163.76   ,
194.143.125.122 ,
168.19.148.205  ,
254.212.69.135  ,
226.180.231.207 ,
147.134.132.117 ,
221.44.94.14    ,
236.211.178.106 ,
86.150.75.12    ,
112.108.225.228 ,
225.187.82.216  ,
117.242.20.35   ,
111.29.64.86    ,
232.59.190.184  ,
215.162.95.142  ,
74.27.161.62    ,
173.215.113.206 ,
223.53.153.23   ,
255.43.128.34   ,
179.172.51.199  ,
222.24.155.23   ,
209.125.14.94   ,
62.172.141.72   ,
60.50.30.239    ,
247.168.71.15   ,
27.122.233.63   ,
63.79.158.94    ,
145.161.31.79   ,
172.129.210.197 ,
154.95.180.90   ,
41.226.32.161   ,
25.180.125.188  ,
15.34.45.153    ,
41.1.55.28      ,
36.133.134.29   ,
152.255.223.164 ,
54.20.97.212    ,
248.238.171.71  ,
81.136.87.48    ,
235.252.252.194 ,
235.44.132.31   ,
1.181.163.195   ,
172.229.128.182 ,
101.214.80.58   ,
214.207.50.205  ,
70.196.132.90   ,
225.186.9.35    ,
202.113.196.224 ,
109.3.57.91     ,
30.73.23.138    ,
58.168.215.80   ,
180.62.37.50    ,
160.10.241.60   ,
233.121.201.78  ,
148.25.247.188  ,
94.230.121.158  ,
27.133.67.33    ,
63.249.203.220  ,
50.152.21.136   ,
60.81.12.43     ,
30.74.63.119    ,
118.114.67.194  ,
89.146.38.66    ,
176.79.77.63    ,
174.101.244.114 ,
205.238.148.94  ,
47.120.124.218  ,
110.237.107.110 ,
111.174.228.85  ,
137.194.238.90  ,
80.9.151.247    ,
105.237.49.126  ,
216.203.228.56  ,
98.221.176.131  ,
197.247.138.105 ,
24.178.143.157  ,
112.118.120.181 ,
96.194.127.171  ,
220.15.217.14   ,
55.150.76.74    ,
144.28.140.225  ,
94.198.164.136  ,
225.182.49.14   ,
89.51.226.197   ,
56.103.190.55   ,
177.252.175.202 ,
73.63.64.192    ,
7.160.171.12    ,
85.44.230.135   ,
5.7.206.7       ,
147.49.1.251    ,
192.212.198.194 ,
237.129.160.203 ,
246.230.0.253   ,
18.182.74.16    ,
117.221.108.212 ,
114.24.198.165  ,
206.183.38.217  ,
35.159.155.5    ,
41.177.221.198  ,
65.177.157.230  ,
72.135.205.52   ,
50.26.43.36     ,
188.14.199.14   ,
180.51.169.137  ,
251.74.102.241  ,
241.48.29.82    ,
107.197.134.128 ,
42.162.94.124   ,
155.108.221.207 ,
232.114.19.146  ,
88.141.130.186  ,
104.202.74.230  ,
186.74.222.100  ,
45.178.63.174   ,
246.195.28.227  ,
83.65.105.165   ,
37.10.220.195   ,
153.13.9.192    ,
239.94.70.250   ,
193.122.150.74  ,
142.60.61.29    ,
138.41.211.49   ,
186.21.3.51     ,
51.95.76.192    ,
41.92.99.183    ,
29.35.135.72    ,
116.147.230.89  ,
85.170.78.11    ,
194.201.80.167  ,
165.158.39.100
"""
        String[] result = listString.split(",")
        return result.collect({ it.trim()})
    }
}
